name: Ansible Lint CI

on:
  pull_request:
    branches: ["main", "stable", "release/v*"]
  push:
    branches: ["main", "stable", "release/v*"]

jobs:
  build:
    name: Ansible Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible and Ansible Lint
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint

      - name: Run Ansible Lint and Save Output
        run: |
          ansible-lint playbooks/*.yml roles/docker_services/**/*.yml --format json > ansible-lint-output.json || true

      - name: Check for Errors
        id: check_errors
        run: |
          if [[ -s ansible-lint-output.json ]]; then
            echo "Linting errors found."
            echo "::set-output name=errors_found::true"
          else
            echo "No linting errors found."
            echo "::set-output name=errors_found::false"
          fi

      - name: Process Ansible Lint Output
        if: steps.check_errors.outputs.errors_found == 'true'
        run: |
          python - <<EOF
import json
from pathlib import Path

# Load JSON data from the output of ansible-lint
data = json.loads(Path('ansible-lint-output.json').read_text())

# Create Markdown table
table = "| Line # | File Path | Error Type | Description |\n|--------|-----------|------------|-------------|\n"
for error in data:
    line = error.get("line", "N/A")
    error_type = error.get("type", "N/A")
    description = error.get("message", "N/A")
    file_path = error.get("path", "N/A")
    table += f"| {line} | {file_path} | {error_type} | {description} |\n"

# Create Markdown checklist
checklist = ""
for error in data:
    line = error.get("line", "N/A")
    error_type = error.get("type", "N/A")
    description = error.get("message", "N/A")
    file_path = error.get("path", "N/A")
    checklist += f"- [ ] **{error_type}**: {description} (File: {file_path}, Line: {line})\n"

# Combine table and checklist with headings and <details> tags
markdown = f"""
### Linting Report

<details>
<summary>ðŸ“‹ Table View</summary>

{table}

</details>

<details>
<summary>âœ… Actionable Checklist</summary>

{checklist}

</details>
"""

# Save the markdown output
Path("ansible-lint-report.md").write_text(markdown)
EOF

      - name: Create GitHub Issue for Linting Errors
        if: steps.check_errors.outputs.errors_found == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_title="Ansible Linting Errors Report - Run #${{ github.run_number }} - $(date '+%Y-%m-%d %H:%M:%S')"
          issue_body=$(cat ansible-lint-report.md | sed ':a;N;$!ba;s/\n/\\n/g') # replaces newlines for API compatibility

          response=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"title\": \"$issue_title\", \"body\": \"$issue_body\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues)

          if [[ $? -ne 0 ]]; then
            echo "Error creating GitHub issue."
            exit 1
          else
            echo "GitHub issue created successfully."
          fi
